#!/bin/bash

# INI File Manager - A CLI tool for reading and writing INI files
# Usage: ./sau_ini [options] file.ini

set -euo pipefail

# Default values
INI_FILE=""
SECTION=""
KEY=""
VALUE=""
ACTION=""
INTERACTIVE_MODE=false
QUIET_MODE=false

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print usage information
usage() {
    cat << EOF
INI File Manager - Read and write INI configuration files

USAGE:
    $0 [OPTIONS] FILE.ini

OPTIONS:
    -h, --help              Show this help message
    -i, --interactive       Interactive mode
    -q, --quiet             Quiet mode (suppress non-essential output)
    
    -r, --read              Read operations
    -w, --write             Write operations
    -u, --update            Update operations (alias for write)
    -d, --delete            Delete operations
    
    -s, --section SECTION   Specify section name
    -k, --key KEY           Specify key name  
    -v, --value VALUE       Specify value
    
    --list-sections         List all sections
    --list-keys SECTION     List all keys in section
    --show-all              Show entire file content

EXAMPLES:
    # Interactive mode
    $0 -i config.ini
    
    # Read specific value
    $0 -r -s "database" -k "host" config.ini
    
    # Write/update value
    $0 -w -s "database" -k "host" -v "localhost" config.ini
    
    # Delete key
    $0 -d -s "database" -k "port" config.ini
    
    # List all sections
    $0 --list-sections config.ini
    
    # List keys in section
    $0 --list-keys "database" config.ini
    
    # Show entire file
    $0 --show-all config.ini

EOF
}

# Logging functions
log_info() {
    [[ "$QUIET_MODE" == "false" ]] && echo -e "${BLUE}[INFO]${NC} $1" >&2
}

log_success() {
    [[ "$QUIET_MODE" == "false" ]] && echo -e "${GREEN}[SUCCESS]${NC} $1" >&2
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" >&2
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# Check if file exists, create if it doesn't
ensure_file_exists() {
    if [[ ! -f "$INI_FILE" ]]; then
        log_info "Creating new INI file: $INI_FILE"
        touch "$INI_FILE"
    fi
}

# Escape special characters for sed
escape_for_sed() {
    echo "$1" | sed 's/[[\.*^$()+?{|]/\\&/g'
}

# Read value from INI file
read_ini_value() {
    local section="$1"
    local key="$2"
    
    if [[ ! -f "$INI_FILE" ]]; then
        log_error "File does not exist: $INI_FILE"
        return 1
    fi
    
    # Use awk to parse INI file
    awk -v section="[$section]" -v key="$key" '
    BEGIN { in_section = 0; found = 0 }
    /^\[.*\]$/ { 
        in_section = ($0 == section) ? 1 : 0
        next
    }
    in_section && /^[^#;]/ {
        if (match($0, /^[[:space:]]*([^=]+)[[:space:]]*=[[:space:]]*(.*)$/, arr)) {
            if (arr[1] == key) {
                print arr[2]
                found = 1
                exit
            }
        }
    }
    END { if (!found) exit 1 }
    ' "$INI_FILE"
}

# Write/update value in INI file
write_ini_value() {
    local section="$1"
    local key="$2"
    local value="$3"
    
    ensure_file_exists
    
    # Check if section exists
    if ! grep -q "^\[$section\]" "$INI_FILE"; then
        log_info "Creating section: [$section]"
        echo "" >> "$INI_FILE"
        echo "[$section]" >> "$INI_FILE"
    fi
    
    # Escape special characters
    local escaped_section=$(escape_for_sed "$section")
    local escaped_key=$(escape_for_sed "$key")
    local escaped_value=$(escape_for_sed "$value")
    
    # Check if key exists in section
    if awk -v section="[$section]" -v key="$key" '
        BEGIN { in_section = 0 }
        /^\[.*\]$/ { in_section = ($0 == section) ? 1 : 0; next }
        in_section && /^[^#;]/ {
            if (match($0, /^[[:space:]]*([^=]+)[[:space:]]*=/, arr)) {
                if (arr[1] == key) exit 0
            }
        }
        END { exit 1 }
    ' "$INI_FILE"; then
        # Update existing key
        log_info "Updating existing key: $key"
        sed -i "/^\[$escaped_section\]/,/^\[.*\]/{
            /^\[.*\]/ {
                /^\[$escaped_section\]/ !b
            }
            s/^[[:space:]]*$escaped_key[[:space:]]*=.*/$escaped_key=$escaped_value/
        }" "$INI_FILE"
    else
        # Add new key after section header
        log_info "Adding new key: $key"
        sed -i "/^\[$escaped_section\]/a\\
$escaped_key=$escaped_value" "$INI_FILE"
    fi
}

# Delete key from INI file
delete_ini_key() {
    local section="$1"
    local key="$2"
    
    if [[ ! -f "$INI_FILE" ]]; then
        log_error "File does not exist: $INI_FILE"
        return 1
    fi
    
    local escaped_section=$(escape_for_sed "$section")
    local escaped_key=$(escape_for_sed "$key")
    
    # Delete the key
    sed -i "/^\[$escaped_section\]/,/^\[.*\]/{
        /^\[.*\]/ {
            /^\[$escaped_section\]/ !b
        }
        /^[[:space:]]*$escaped_key[[:space:]]*=/d
    }" "$INI_FILE"
    
    log_success "Deleted key '$key' from section '[$section]'"
}

# List all sections
list_sections() {
    if [[ ! -f "$INI_FILE" ]]; then
        log_error "File does not exist: $INI_FILE"
        return 1
    fi
    
    grep -o '^\[.*\]' "$INI_FILE" | sed 's/^\[\(.*\)\]$/\1/'
}

# List all keys in a section
list_keys() {
    local section="$1"
    
    if [[ ! -f "$INI_FILE" ]]; then
        log_error "File does not exist: $INI_FILE"
        return 1
    fi
    
    awk -v section="[$section]" '
    BEGIN { in_section = 0 }
    /^\[.*\]$/ { 
        in_section = ($0 == section) ? 1 : 0
        next
    }
    in_section && /^[^#;]/ {
        if (match($0, /^[[:space:]]*([^=]+)[[:space:]]*=/, arr)) {
            print arr[1]
        }
    }
    ' "$INI_FILE"
}

# Show entire file content
show_all() {
    if [[ ! -f "$INI_FILE" ]]; then
        log_error "File does not exist: $INI_FILE"
        return 1
    fi
    
    cat "$INI_FILE"
}

# Interactive mode
interactive_mode() {
    log_info "Starting interactive mode for: $INI_FILE"
    
    while true; do
        echo ""
        echo "=== INI File Manager - Interactive Mode ==="
        echo "File: $INI_FILE"
        echo ""
        echo "1) Read value"
        echo "2) Write/Update value"
        echo "3) Delete key"
        echo "4) List sections"
        echo "5) List keys in section"
        echo "6) Show entire file"
        echo "7) Create new section"
        echo "0) Exit"
        echo ""
        read -p "Choose an option: " choice
        
        case $choice in
            1)
                read -p "Enter section name: " section
                read -p "Enter key name: " key
                echo ""
                if value=$(read_ini_value "$section" "$key"); then
                    echo "Value: $value"
                else
                    log_error "Key not found or section doesn't exist"
                fi
                ;;
            2)
                read -p "Enter section name: " section
                read -p "Enter key name: " key
                read -p "Enter value: " value
                echo ""
                write_ini_value "$section" "$key" "$value"
                log_success "Value written successfully"
                ;;
            3)
                read -p "Enter section name: " section
                read -p "Enter key name: " key
                echo ""
                delete_ini_key "$section" "$key"
                ;;
            4)
                echo ""
                echo "Sections:"
                list_sections
                ;;
            5)
                read -p "Enter section name: " section
                echo ""
                echo "Keys in [$section]:"
                list_keys "$section"
                ;;
            6)
                echo ""
                echo "File content:"
                echo "----------------------------------------"
                show_all
                echo "----------------------------------------"
                ;;
            7)
                read -p "Enter new section name: " section
                echo ""
                write_ini_value "$section" "_temp_key" "temp_value"
                delete_ini_key "$section" "_temp_key"
                log_success "Section [$section] created"
                ;;
            0)
                log_info "Exiting interactive mode"
                exit 0
                ;;
            *)
                log_error "Invalid option"
                ;;
        esac
    done
}

# Parse command line arguments
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                usage
                exit 0
                ;;
            -i|--interactive)
                INTERACTIVE_MODE=true
                shift
                ;;
            -q|--quiet)
                QUIET_MODE=true
                shift
                ;;
            -r|--read)
                ACTION="read"
                shift
                ;;
            -w|--write|-u|--update)
                ACTION="write"
                shift
                ;;
            -d|--delete)
                ACTION="delete"
                shift
                ;;
            -s|--section)
                SECTION="$2"
                shift 2
                ;;
            -k|--key)
                KEY="$2"
                shift 2
                ;;
            -v|--value)
                VALUE="$2"
                shift 2
                ;;
            --list-sections)
                ACTION="list_sections"
                shift
                ;;
            --list-keys)
                ACTION="list_keys"
                SECTION="$2"
                shift 2
                ;;
            --show-all)
                ACTION="show_all"
                shift
                ;;
            -*)
                log_error "Unknown option: $1"
                usage
                exit 1
                ;;
            *)
                if [[ -z "$INI_FILE" ]]; then
                    INI_FILE="$1"
                else
                    log_error "Multiple files specified"
                    exit 1
                fi
                shift
                ;;
        esac
    done
}

# Main function
main() {
    parse_args "$@"
    
    # Check if file is specified
    if [[ -z "$INI_FILE" ]]; then
        log_error "No INI file specified"
        usage
        exit 1
    fi
    
    # Interactive mode
    if [[ "$INTERACTIVE_MODE" == "true" ]]; then
        interactive_mode
        exit 0
    fi
    
    # Execute action
    case "$ACTION" in
        read)
            if [[ -z "$SECTION" || -z "$KEY" ]]; then
                log_error "Section and key must be specified for read operation"
                exit 1
            fi
            if value=$(read_ini_value "$SECTION" "$KEY"); then
                echo "$value"
            else
                exit 1
            fi
            ;;
        write)
            if [[ -z "$SECTION" || -z "$KEY" || -z "$VALUE" ]]; then
                log_error "Section, key, and value must be specified for write operation"
                exit 1
            fi
            write_ini_value "$SECTION" "$KEY" "$VALUE"
            log_success "Value written successfully"
            ;;
        delete)
            if [[ -z "$SECTION" || -z "$KEY" ]]; then
                log_error "Section and key must be specified for delete operation"
                exit 1
            fi
            delete_ini_key "$SECTION" "$KEY"
            ;;
        list_sections)
            list_sections
            ;;
        list_keys)
            if [[ -z "$SECTION" ]]; then
                log_error "Section must be specified for list-keys operation"
                exit 1
            fi
            list_keys "$SECTION"
            ;;
        show_all)
            show_all
            ;;
        "")
            log_error "No action specified"
            usage
            exit 1
            ;;
        *)
            log_error "Unknown action: $ACTION"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
